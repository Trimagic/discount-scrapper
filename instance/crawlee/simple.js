/* eslint-disable no-console */
import { PuppeteerCrawler, Configuration, RequestQueue } from "crawlee";
import fs from "node:fs/promises";
import path from "node:path";
import crypto from "node:crypto";

Configuration.set("systemInfoV2", true);
Configuration.set("disableSystemInfo", true);

/**
 * –î–æ–ª–≥–æ-–∂–∏–≤—É—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å:
 * - –µ–¥–∏–Ω—ã–π PuppeteerCrawler
 * - –µ–¥–∏–Ω—ã–π RequestQueue
 * - enqueue(url) -> Promise<result>, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –∏–∑ requestHandler
 */
export class HoldInstanceQueue {
  constructor(opts = {}) {
    // –≤—å—é–ø–æ—Ä—Ç/—Ä–µ–∂–∏–º
    this.width = opts.width ?? 1920;
    this.height = opts.height ?? 900;
    this.headless = opts.headless ?? false;

    // –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    this.waitOnError = opts.waitOnError ?? true;

    // —Ç–∞–π–º–∏–Ω–≥–∏
    this.navigationTimeoutSecs = opts.navigationTimeoutSecs ?? 60;

    // —Å–µ—Å—Å–∏–∏
    this.sessionBaseDir = opts.sessionBaseDir ?? "./session";
    this.profileName = opts.profileName ?? "default";
    this.sessionDir = opts.sessionDir ?? undefined;

    // –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–≤–æ–π getFullDataMarket)
    this.extractor =
      typeof opts.extractor === "function" ? opts.extractor : null;

    // –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    /** @type {Map<string, {resolve:Function, reject:Function}>} */
    this._pending = new Map();

    // —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this._queue = null;
    this._crawler = null;
    this._isRunning = false;
    this._runPromise = null;
  }

  static async create(opts = {}) {
    const inst = new HoldInstanceQueue(opts);
    await inst.#ensureSessionDir();
    await inst.#ensureQueue();
    await inst.#ensureCrawler();
    return inst;
  }

  async #ensureSessionDir() {
    if (!this.sessionDir) {
      const name = this.profileName || "default";
      this.sessionDir = path.resolve(this.sessionBaseDir, name);
    } else {
      this.sessionDir = path.resolve(this.sessionDir);
    }
    await fs.mkdir(this.sessionDir, { recursive: true });
    console.log(`üìÅ userDataDir: ${this.sessionDir}`);
  }

  async #ensureQueue() {
    if (!this._queue) {
      this._queue = await RequestQueue.open(`rq-${this.profileName}`);
      console.log(`üóÇÔ∏è RequestQueue ready: rq-${this.profileName}`);
    }
  }

  async #ensureCrawler() {
    if (this._crawler) return;

    const self = this;

    this._crawler = new PuppeteerCrawler({
      headless: self.headless,
      maxRequestRetries: 0,
      navigationTimeoutSecs: self.navigationTimeoutSecs,
      requestHandlerTimeoutSecs: Math.max(self.navigationTimeoutSecs + 30, 90),

      requestQueue: self._queue,

      browserPoolOptions: {
        retireBrowserAfterPageCount: Number.MAX_SAFE_INTEGER,
        maxOpenPagesPerBrowser: 1,
      },

      launchContext: {
        userDataDir: self.sessionDir,
        launchOptions: {
          defaultViewport: { width: self.width, height: self.height },
        },
      },

      preNavigationHooks: [
        async (_ctx, gotoOptions) => {
          gotoOptions.waitUntil = "networkidle2";
          gotoOptions.timeout = self.navigationTimeoutSecs * 1000;
        },
      ],

      async requestHandler(ctx) {
        const { page, request } = ctx;
        const key = request.userData?.jobKey;

        try {
          await page.waitForSelector("body", { timeout: 30_000 });
          await page.waitForFunction(
            () => ["interactive", "complete"].includes(document.readyState),
            { timeout: 30_000 }
          );
          try {
            if (page.waitForNetworkIdle) {
              await page.waitForNetworkIdle({ idleTime: 800, timeout: 10_000 });
            }
          } catch {}

          const stableEval = createStableEval(page);

          // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä
          let result = null;
          if (typeof self.extractor === "function") {
            result = await self.extractor(page, request.url, {
              ctx,
              stableEval,
            });
          } else {
            // –¥–µ—Ñ–æ–ª—Ç
            result = await stableEval(() => {
              const h1 = document.querySelector("h1");
              return {
                title: h1 ? h1.textContent.trim() : null,
                url: location.href,
              };
            });
          }

          const waiter = key ? self._pending.get(key) : null;
          if (waiter) {
            waiter.resolve({ ok: true, url: request.url, result });
            self._pending.delete(key);
          }
        } catch (err) {
          console.error("‚ùå Handler error:", err?.message || err);
          const waiter = key ? self._pending.get(key) : null;

          if (waiter) {
            waiter.reject(err);
            self._pending.delete(key);
          }

          if (self.waitOnError) {
            console.log(
              "‚è∏Ô∏è waitOnError=true ‚Üí –¥–µ—Ä–∂—É –æ–∫–Ω–æ. Ctrl+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
            );
            await new Promise(() => {});
          } else {
            throw err;
          }
        }
      },

      async failedRequestHandler({ request, error }) {
        const key = request.userData?.jobKey;
        console.error(
          "‚ùå failedRequestHandler:",
          request.url,
          "-",
          error?.message || error
        );
        const waiter = key ? this._pending.get(key) : null;
        if (waiter) {
          waiter.reject(error);
          this._pending.delete(key);
        }
        if (this.waitOnError) {
          console.log(
            "‚è∏Ô∏è waitOnError=true ‚Üí –¥–µ—Ä–∂—É –æ–∫–Ω–æ –ø–æ—Å–ª–µ nav-–æ—à–∏–±–∫–∏. Ctrl+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
          );
          await new Promise(() => {});
        }
      },
    });
  }

  async #ensureRun() {
    if (this._isRunning) return this._runPromise;

    this._isRunning = true;
    this._runPromise = (async () => {
      try {
        console.log("‚ñ∂Ô∏è crawler.run() started");
        await this._crawler.run(); // –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—É—Å—Ç–µ–µ—Ç
        console.log("‚èπÔ∏è crawler.run() finished (queue empty)");
      } finally {
        this._isRunning = false;
      }
    })();

    return this._runPromise;
  }

  /**
   * –ü–æ—Å—Ç–∞–≤–∏—Ç—å URL –≤ –æ—á–µ—Ä–µ–¥—å –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.
   * @param {string} url
   * @param {{ uniqueKey?: string, userData?: any }} [opts]
   */
  async enqueue(url, { uniqueKey, userData } = {}) {
    if (!url || typeof url !== "string") {
      throw new Error("enqueue(url): –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π URL (string).");
    }

    const jobKey = crypto.randomUUID();
    const promise = new Promise((resolve, reject) => {
      this._pending.set(jobKey, { resolve, reject });
    });

    // –ì–µ–Ω–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ
    const effectiveKey = uniqueKey || `${url}::${Date.now()}`;
    const addRes = await this._queue.addRequest(
      {
        url,
        uniqueKey: effectiveKey,
        userData: { ...(userData || {}), jobKey },
      },
      { forefront: true }
    );

    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞/–µ—Å—Ç—å ‚Äî —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
    if (addRes?.wasAlreadyHandled || addRes?.wasAlreadyPresent) {
      const forceKey = `${url}::force::${Date.now()}`;
      const addRes2 = await this._queue.addRequest(
        {
          url,
          uniqueKey: forceKey,
          userData: { ...(userData || {}), jobKey },
        },
        { forefront: true }
      );

      if (addRes2?.wasAlreadyHandled) {
        const waiter = this._pending.get(jobKey);
        if (waiter) {
          waiter.reject(
            new Error("Request wasAlreadyHandled; use uniqueKey to re-run.")
          );
          this._pending.delete(jobKey);
        }
        return promise;
      }
    }

    // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∫—Ä–∞—É–ª–µ—Ä–∞
    this.#ensureRun().catch((e) => {
      console.error("ensureRun() error:", e);
      const waiter = this._pending.get(jobKey);
      if (waiter) {
        waiter.reject(e);
        this._pending.delete(jobKey);
      }
    });

    return promise;
  }

  async stop() {
    console.log("‚ÑπÔ∏è stop(): –¥–æ–∂–¥—É—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ run() (–µ—Å–ª–∏ –æ–Ω –∏–¥—ë—Ç).");
    try {
      if (this._runPromise) await this._runPromise;
    } catch (e) {
      console.error("stop() run error:", e);
    }
  }
}

function createStableEval(page) {
  return async (fn, ...args) => {
    try {
      return await page.evaluate(fn, ...args);
    } catch (e) {
      const msg = String(e?.message || e);
      if (msg.includes("Execution context was destroyed")) {
        await page.waitForSelector("body", { timeout: 30_000 });
        await page.waitForFunction(
          () => ["interactive", "complete"].includes(document.readyState),
          { timeout: 30_000 }
        );
        return await page.evaluate(fn, ...args);
      }
      throw e;
    }
  };
}
