/* eslint-disable no-console */
// HoldInstance –Ω–∞ Crawlee + PuppeteerCrawler + –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è
// - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç/—á–∏—Ç–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –∏–∑ userDataDir
// - sessionDir –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∏–∑ sessionBaseDir + profileName, –ª–∏–±–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
// - –¥–µ—Ä–∂–∏—Ç –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—Ä–∏ —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
// - –±–µ–∑ —Ä–µ—Ç—Ä–∞–µ–≤

import { PuppeteerCrawler, Configuration } from "crawlee";
import fs from "node:fs/promises";
import path from "node:path";

Configuration.set("systemInfoV2", true);

export class HoldInstance {
  constructor(opts = {}) {
    this.width = opts.width ?? 1920;
    this.height = opts.height ?? 900;
    this.headless = opts.headless ?? false;

    // –ø–æ–≤–µ–¥–µ–Ω–∏–µ:
    this.keepOpenOnSuccess = opts.keepOpenOnSuccess ?? true; // –¥–µ—Ä–∂–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    this.waitOnError = opts.waitOnError ?? true; // –¥–µ—Ä–∂–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    // –Ω–∞–≤–∏–≥–∞—Ü–∏—è/—Ç–∞–π–º–∏–Ω–≥–∏:
    this.navigationTimeoutSecs = opts.navigationTimeoutSecs ?? 60;

    // —Å–µ—Å—Å–∏–∏:
    this.sessionBaseDir = opts.sessionBaseDir ?? "./session";
    this.profileName = opts.profileName ?? undefined;
    // –µ—Å–ª–∏ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ sessionDir ‚Äî –æ–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
    this.sessionDir = opts.sessionDir ?? undefined;
  }

  static async create(opts = {}) {
    const inst = new HoldInstance(opts);
    await inst.#ensureSessionDir();
    return inst;
  }

  async #ensureSessionDir() {
    if (!this.sessionDir) {
      const name = this.profileName || "default";
      this.sessionDir = path.resolve(this.sessionBaseDir, name);
    } else {
      this.sessionDir = path.resolve(this.sessionDir);
    }
    await fs.mkdir(this.sessionDir, { recursive: true });
    console.log(`üìÅ userDataDir: ${this.sessionDir}`);
  }

  /**
   * @param {string} url
   * @param {(ctx: { page: import('puppeteer').Page, request: any, log: any, stableEval: <T>(fn: (...args:any[]) => T, ...args:any[])=>Promise<T> }) => Promise<void>} handler
   */
  async open(url, handler) {
    const self = this; // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

    const crawler = new PuppeteerCrawler({
      headless: self.headless,
      maxRequestsPerCrawl: 1,
      maxRequestRetries: 0, // –±–µ–∑ —Ä–µ—Ç—Ä–∞–µ–≤
      navigationTimeoutSecs: self.navigationTimeoutSecs,
      requestHandlerTimeoutSecs: Math.max(self.navigationTimeoutSecs + 30, 90),

      browserPoolOptions: {
        retireBrowserAfterPageCount: Number.MAX_SAFE_INTEGER,
        maxOpenPagesPerBrowser: 1,
      },

      launchContext: {
        // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º/—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ —Ç—É—Ç
        userDataDir: self.sessionDir,
        launchOptions: {
          defaultViewport: { width: self.width, height: self.height },
        },
      },

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º goto —á–µ—Ä–µ–∑ preNavigationHooks (–∞–Ω–∞–ª–æ–≥ gotoFunction –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö)
      preNavigationHooks: [
        async (_ctx, gotoOptions) => {
          gotoOptions.waitUntil = "networkidle2";
          gotoOptions.timeout = self.navigationTimeoutSecs * 1000;
        },
      ],

      async requestHandler(ctx) {
        const { page, request, log } = ctx;

        try {
          // –±–∞–∑–æ–≤–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ evaluate/$eval
          await page.waitForSelector("body", { timeout: 30_000 });
          await page.waitForFunction(
            () => ["interactive", "complete"].includes(document.readyState),
            { timeout: 30_000 }
          );
          try {
            if (page.waitForNetworkIdle) {
              await page.waitForNetworkIdle({ idleTime: 800, timeout: 10_000 });
            }
          } catch {}

          const stableEval = createStableEval(page);

          if (typeof handler === "function") {
            await handler({ page, request, log, stableEval });
          }

          if (self.keepOpenOnSuccess) {
            console.log(
              "‚è∏Ô∏è keepOpenOnSuccess=true ‚Üí —É–¥–µ—Ä–∂–∏–≤–∞—é –æ–∫–Ω–æ. –ù–∞–∂–º–∏ Ctrl+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
            );
            await new Promise(() => {}); // –¥–µ—Ä–∂–∏–º –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
          }
        } catch (err) {
          console.error("‚ùå Handler error:", err?.message || err);
          if (self.waitOnError) {
            console.log(
              "‚è∏Ô∏è waitOnError=true ‚Üí —É–¥–µ—Ä–∂–∏–≤–∞—é –æ–∫–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏. –ù–∞–∂–º–∏ Ctrl+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
            );
            await new Promise(() => {}); // –¥–µ—Ä–∂–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
          } else {
            throw err;
          }
        }
      },

      async failedRequestHandler({ request, error }) {
        console.error(
          "‚ùå failedRequestHandler:",
          request.url,
          "-",
          error?.message || error
        );
        if (self.waitOnError) {
          console.log(
            "‚è∏Ô∏è waitOnError=true ‚Üí —É–¥–µ—Ä–∂–∏–≤–∞—é –æ–∫–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏. –ù–∞–∂–º–∏ Ctrl+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
          );
          await new Promise(() => {});
        }
      },
    });

    await crawler.run([url]); // –Ω–µ –≤–µ—Ä–Ω—ë—Ç—Å—è, –ø–æ–∫–∞ ¬´–≤–µ—á–Ω–∞—è –ø–∞—É–∑–∞¬ª –∞–∫—Ç–∏–≤–Ω–∞
  }

  async stop() {
    console.log(
      "‚ÑπÔ∏è stop(): Crawlee –∑–∞–∫—Ä–æ–µ—Ç –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run(). –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ ‚Äî Ctrl+C."
    );
  }
}

/**
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è page.evaluate:
 * –ü—Ä–∏ "Execution context was destroyed" –∂–¥—ë–º DOM –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ (1 —Ä–∞–∑).
 */
function createStableEval(page) {
  return async (fn, ...args) => {
    try {
      return await page.evaluate(fn, ...args);
    } catch (e) {
      const msg = String(e?.message || e);
      if (msg.includes("Execution context was destroyed")) {
        await page.waitForSelector("body", { timeout: 30_000 });
        await page.waitForFunction(
          () => ["interactive", "complete"].includes(document.readyState),
          { timeout: 30_000 }
        );
        return await page.evaluate(fn, ...args);
      }
      throw e;
    }
  };
}
