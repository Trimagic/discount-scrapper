/* eslint-disable no-console */
import { PuppeteerCrawler, Configuration, RequestQueue } from "crawlee";
import fs from "node:fs/promises";
import path from "node:path";
import crypto from "node:crypto";

Configuration.set("systemInfoV2", true);
Configuration.set("disableSystemInfo", true);

/**
 * –î–æ–ª–≥–æ-–∂–∏–≤—É—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å:
 * - –µ–¥–∏–Ω—ã–π PuppeteerCrawler
 * - –µ–¥–∏–Ω—ã–π RequestQueue
 * - enqueue(url, { ...userData }) -> Promise<result>, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –∏–∑ requestHandler
 */
export class HoldInstanceQueue {
  constructor(opts = {}) {
    // –≤—å—é–ø–æ—Ä—Ç/—Ä–µ–∂–∏–º
    this.width = opts.width ?? 1920;
    this.height = opts.height ?? 900;
    this.headless = opts.headless ?? false;

    // –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    this.waitOnError = opts.waitOnError ?? true;

    // —Ç–∞–π–º–∏–Ω–≥–∏
    this.navigationTimeoutSecs = opts.navigationTimeoutSecs ?? 60;

    // —Å–µ—Å—Å–∏–∏
    this.sessionBaseDir = opts.sessionBaseDir ?? "./session";
    this.profileName = opts.profileName ?? "default";
    this.sessionDir = opts.sessionDir ?? undefined;

    // –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–≤–æ–π getFullDataMarket/getPricesForUrls)
    this.extractor =
      typeof opts.extractor === "function" ? opts.extractor : null;

    // –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    /** @type {Map<string, {resolve:Function, reject:Function}>} */
    this._pending = new Map();

    // —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this._queue = null;
    this._crawler = null;
    this._isRunning = false;
    this._runPromise = null;
  }

  static async create(opts = {}) {
    console.log("[HoldInstanceQueue] create() called");
    const inst = new HoldInstanceQueue(opts);
    await inst.#ensureSessionDir();
    await inst.#ensureQueue();
    await inst.#ensureCrawler();
    console.log("[HoldInstanceQueue] create() ready");
    return inst;
  }

  async #ensureSessionDir() {
    console.log("[HoldInstanceQueue] ensureSessionDir");
    if (!this.sessionDir) {
      const name = this.profileName || "default";
      this.sessionDir = path.resolve(this.sessionBaseDir, name);
    } else {
      this.sessionDir = path.resolve(this.sessionDir);
    }
    await fs.mkdir(this.sessionDir, { recursive: true });
    console.log(`üìÅ userDataDir: ${this.sessionDir}`);
  }

  async #ensureQueue() {
    if (!this._queue) {
      console.log("[HoldInstanceQueue] Opening RequestQueue‚Ä¶");
      this._queue = await RequestQueue.open(`rq-${this.profileName}`);
      console.log(`üóÇÔ∏è RequestQueue ready: rq-${this.profileName}`);
    }
  }

  async #ensureCrawler() {
    if (this._crawler) return;
    console.log("[HoldInstanceQueue] Creating PuppeteerCrawler‚Ä¶");

    const self = this;

    this._crawler = new PuppeteerCrawler({
      headless: self.headless,
      maxRequestRetries: 0,
      navigationTimeoutSecs: self.navigationTimeoutSecs,
      requestHandlerTimeoutSecs: Math.max(self.navigationTimeoutSecs + 30, 180),

      requestQueue: self._queue,

      browserPoolOptions: {
        retireBrowserAfterPageCount: Number.MAX_SAFE_INTEGER,
        maxOpenPagesPerBrowser: 1,
      },

      launchContext: {
        userDataDir: self.sessionDir,
        launchOptions: {
          defaultViewport: { width: self.width, height: self.height },
          headless: self.headless,
        },
      },

      preNavigationHooks: [
        async (_ctx, gotoOptions) => {
          console.log(
            "[preNavigationHooks] set waitUntil=networkidle2, timeout=%dms",
            self.navigationTimeoutSecs * 1000
          );
          gotoOptions.waitUntil = "networkidle2";
          gotoOptions.timeout = self.navigationTimeoutSecs * 1000;
        },
      ],

      async requestHandler(ctx) {
        const { page, request } = ctx;
        const key = request.userData?.jobKey;
        const items = request.userData?.items;
        const mode = request.userData?.mode;

        console.log("[requestHandler] fired ‚Üí", {
          url: request.url,
          key,
          mode,
          hasItems: Array.isArray(items),
          itemsCount: Array.isArray(items) ? items.length : 0,
        });

        try {
          await page.waitForSelector("body", { timeout: 30_000 });
          await page.waitForFunction(
            () => ["interactive", "complete"].includes(document.readyState),
            { timeout: 30_000 }
          );
          try {
            if (page.waitForNetworkIdle) {
              await page.waitForNetworkIdle({ idleTime: 800, timeout: 10_000 });
            }
          } catch {}

          const stableEval = createStableEval(page);

          // userData, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–¥—É—Ç –≤ extractor
          const userDataForExtractor = {
            ...request.userData,
            ctx,
            stableEval,
          };

          // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä
          let result = null;
          if (typeof self.extractor === "function") {
            console.log("[requestHandler] calling extractor with userData:", {
              ...userDataForExtractor,
              // –Ω–µ —Å–ø–∞–º–∏–º –ª–æ–≥ jobKey –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ
              jobKey: userDataForExtractor.jobKey ? "[present]" : undefined,
            });
            result = await self.extractor(
              page,
              request.url,
              userDataForExtractor
            );
          } else {
            console.log(
              "[requestHandler] no extractor provided, using default evaluate()"
            );
            result = await stableEval(() => {
              const h1 = document.querySelector("h1");
              return {
                title: h1 ? h1.textContent.trim() : document.title || null,
                url: location.href,
              };
            });
          }

          // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const payload =
            result &&
            typeof result === "object" &&
            ("data" in result || "error" in result)
              ? result
              : { data: result, error: null };

          const waiter = key ? self._pending.get(key) : null;
          if (waiter) {
            console.log("[requestHandler] resolving job:", key);
            waiter.resolve(payload);
            self._pending.delete(key);
          } else {
            console.warn("[requestHandler] no pending resolver for key:", key);
          }
        } catch (err) {
          console.error("[requestHandler] ‚ùå Error:", err?.message || err);
          const waiter = key ? self._pending.get(key) : null;

          if (waiter) {
            console.log("[requestHandler] rejecting job:", key);
            waiter.reject(err);
            self._pending.delete(key);
          }

          if (self.waitOnError) {
            console.log(
              "‚è∏Ô∏è waitOnError=true ‚Üí –¥–µ—Ä–∂—É –æ–∫–Ω–æ. Ctrl+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
            );
            await new Promise(() => {});
          } else {
            throw err;
          }
        }
      },

      async failedRequestHandler({ request, error }) {
        const key = request.userData?.jobKey;
        console.error("[failedRequestHandler]", {
          url: request.url,
          key,
          error: error?.message || error,
        });

        const waiter = key ? self._pending.get(key) : null;
        if (waiter) {
          waiter.reject(error);
          self._pending.delete(key);
        }

        if (self.waitOnError) {
          console.log(
            "‚è∏Ô∏è waitOnError=true ‚Üí –¥–µ—Ä–∂—É –æ–∫–Ω–æ –ø–æ—Å–ª–µ nav-–æ—à–∏–±–∫–∏. Ctrl+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
          );
          await new Promise(() => {});
        }
      },
    });

    console.log("[HoldInstanceQueue] PuppeteerCrawler created");
  }

  async #ensureRun() {
    if (this._isRunning) {
      console.log("[HoldInstanceQueue] run() already active");
      return this._runPromise;
    }

    console.log("[HoldInstanceQueue] starting crawler.run()");
    this._isRunning = true;
    this._runPromise = (async () => {
      try {
        await this._crawler.run(); // –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å –æ–ø—É—Å—Ç–µ–µ—Ç
        console.log("[HoldInstanceQueue] crawler.run() finished (queue empty)");
      } catch (e) {
        console.error("[HoldInstanceQueue] run() error:", e?.message || e);
      } finally {
        this._isRunning = false;
      }
    })();

    return this._runPromise;
  }

  /**
   * –ü–æ—Å—Ç–∞–≤–∏—Ç—å URL –≤ –æ—á–µ—Ä–µ–¥—å –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.
   * opts –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –ø–æ–ª—è (mode, items, ...), –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ request.userData
   * @param {string} url
   * @param {{ uniqueKey?: string, [k:string]: any }} [opts]
   */
  async enqueue(url, opts = {}) {
    console.log("[enqueue] called", { url });
    if (!url || typeof url !== "string") {
      throw new Error("enqueue(url): –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π URL (string).");
    }

    const { uniqueKey, ...rest } = opts; // ‚Üê —Å–æ–±–µ—Ä—ë–º –≤—Å—ë (mode, items, etc.) –≤ rest
    const jobKey = crypto.randomUUID();
    const promise = new Promise((resolve, reject) => {
      this._pending.set(jobKey, { resolve, reject });
    });

    const effectiveKey = uniqueKey || `${url}::${Date.now()}`;
    console.log("[enqueue] addRequest", {
      effectiveKey,
      jobKey,
      userData: rest,
    });

    const addRes = await this._queue.addRequest(
      {
        url,
        uniqueKey: effectiveKey,
        userData: { ...rest, jobKey }, // ‚Üê —Ç–µ–ø–µ—Ä—å mode/items –ø–æ–µ–¥—É—Ç —Å—é–¥–∞
      },
      { forefront: true }
    );

    if (addRes?.wasAlreadyHandled || addRes?.wasAlreadyPresent) {
      // —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
      const forceKey = `${url}::force::${Date.now()}`;
      console.log("[enqueue] duplicate detected ‚Üí addRequest(force)", {
        forceKey,
        jobKey,
      });

      const addRes2 = await this._queue.addRequest(
        {
          url,
          uniqueKey: forceKey,
          userData: { ...rest, jobKey },
        },
        { forefront: true }
      );

      if (addRes2?.wasAlreadyHandled) {
        console.warn("[enqueue] wasAlreadyHandled on force request");
        const waiter = this._pending.get(jobKey);
        if (waiter) {
          waiter.reject(
            new Error("Request wasAlreadyHandled; provide uniqueKey to re-run.")
          );
          this._pending.delete(jobKey);
        }
        return promise;
      }
    }

    // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∫—Ä–∞—É–ª–µ—Ä–∞
    this.#ensureRun().catch((e) => {
      console.error("[enqueue] ensureRun error", e);
      const waiter = this._pending.get(jobKey);
      if (waiter) {
        waiter.reject(e);
        this._pending.delete(jobKey);
      }
    });

    return promise;
  }

  async stop() {
    console.log("‚ÑπÔ∏è stop(): –¥–æ–∂–¥—É—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ run() (–µ—Å–ª–∏ –æ–Ω –∏–¥—ë—Ç).");
    try {
      if (this._runPromise) await this._runPromise;
    } catch (e) {
      console.error("stop() run error:", e);
    }
  }
}

/** –ù–∞–¥—ë–∂–Ω—ã–π evaluate: –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ—Å–ª–µ ¬´Execution context was destroyed¬ª */
function createStableEval(page) {
  return async (fn, ...args) => {
    try {
      return await page.evaluate(fn, ...args);
    } catch (e) {
      const msg = String(e?.message || e);
      if (msg.includes("Execution context was destroyed")) {
        console.warn(
          "[stableEval] context destroyed ‚Üí retrying after DOM ready"
        );
        await page.waitForSelector("body", { timeout: 30_000 });
        await page.waitForFunction(
          () => ["interactive", "complete"].includes(document.readyState),
          { timeout: 30_000 }
        );
        return await page.evaluate(fn, ...args);
      }
      throw e;
    }
  };
}
